name: 🚀 Deploy UrbanMail - Postal Server

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '72.60.10.112'
  VPS_USER: 'root'
  APP_DIR: '/opt/postal'
  APP_PORT: '5000'
  IMAGE_NAME: 'postal'
  CONTAINER_NAME: 'postal'

jobs:
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔑 Setup SSH
      run: |
        sudo apt-get update -qq && sudo apt-get install -y sshpass
        mkdir -p ~/.ssh && chmod 700 ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

    - name: 📦 Transfer Code
      run: |
        sudo apt-get install -y rsync
        sshpass -p "${{ secrets.VPS_PASSWORD }}" rsync -avz --delete \
          --exclude='.git/' \
          --exclude='log/' \
          --exclude='tmp/' \
          --exclude='.claude/' \
          -e "ssh -o StrictHostKeyChecking=no" \
          ./ ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/

    - name: 🚀 Deploy with Docker
      run: |
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.APP_DIR }}
          
          # Install Docker if needed
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl start docker
            systemctl enable docker
          fi
          
          # Configure firewall for port ${{ env.APP_PORT }}
          echo '🔥 Configurando firewall...'
          ufw allow ${{ env.APP_PORT }}/tcp || iptables -A INPUT -p tcp --dport ${{ env.APP_PORT }} -j ACCEPT || true
          
          # Stop existing container
          docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          
          # Build image
          docker build -t ${{ env.IMAGE_NAME }} .
          
          # Run container
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p 0.0.0.0:${{ env.APP_PORT }}:5000 \
            --restart unless-stopped \
            -v /opt/postal/config:/config \
            -v /opt/postal/data:/opt/postal/data \
            ${{ env.IMAGE_NAME }}
          
          # Wait and test
          sleep 15
          echo '🔍 Testando container...'
          if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            echo '✅ Container rodando:'
            docker ps | grep ${{ env.CONTAINER_NAME }}
            
            # Test local connectivity
            echo '🔍 Testando conectividade local...'
            if curl -f -s --connect-timeout 5 http://localhost:${{ env.APP_PORT }}/ >/dev/null 2>&1; then
              echo '✅ Aplicação respondendo localmente'
            else
              echo '⚠️ Aplicação não responde localmente'
              echo '📋 Logs do container:'
              docker logs ${{ env.CONTAINER_NAME }} --tail 20 2>&1 || true
            fi
            
            # Check port binding
            echo '🔍 Verificando binding da porta...'
            netstat -tlnp | grep :${{ env.APP_PORT }} || echo 'Porta não encontrada no netstat'
            
            # Check processes
            echo '🔍 Processos no container:'
            docker exec ${{ env.CONTAINER_NAME }} ps aux || echo 'Não foi possível listar processos'
            
          else
            echo '❌ Deploy failed - Container não está rodando'
            docker logs ${{ env.CONTAINER_NAME }} 2>&1 || true
            exit 1
          fi
        "

    - name: 🎉 Success
      run: |
        echo "🎉 Deploy realizado com sucesso!"
        echo "🌐 Acesso: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"